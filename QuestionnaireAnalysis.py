import pathlib
import numpy as np
import pandas as pd
from typing import Union
import matplotlib.pyplot as plt


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data = []
        file_path = pathlib.Path(data_fname)
        if file_path.exists():
            self.data_fname = file_path
        else:
            raise ValueError('Error: file not found')

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)
        
    """
        if type(self.data_fname) == 'pathlib.Path': #class 'pathlib.WindowsPath'
            with open(self.data_fname, "r") as file:
                data = json.load(file)
        elif type(self.data_fname) == 'string':
            with open(self.data_fname, "r") as file:
                data = json.loads(file)
"""
    def show_age_distrib(self) -> tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

    Returns
        -------
    hist : np.ndarray
      Number of people in a given bin
    bins : np.ndarray
      Bin edges
    """
        hist_vals = self.data.age.values
        hist_bins = range(0, 110, 10)
        hist, bins = np.histogram(hist_vals, bins = hist_bins)
        plt.figure()
        plt.hist(hist_vals, bins = hist_bins)
        plt.show()
        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

Returns
-------
df : pd.DataFrame
  A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
  the (ordinal) index after a reset.
    """
        drop_rows = []
        for i, e in enumerate(self.data.email.values):
            if e[-1] != "@" and e[0] != "@" and e.count('@') == 1 and e.count('@.') == 0 and \
                e[0] != '.' and e[-1] != '.' and e.count('.') >= 1:
                next
            else:
                drop_rows.append(i)

        df = self.data.drop(drop_rows, inplace=False)
        return df

    def fill_na_with_mean(self) -> tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
    all questions, and replaces that missing value with the mean of the
    other grades for that student.

Returns
-------
df : pd.DataFrame
  The corrected DataFrame after insertion of the mean grade
arr : np.ndarray
      Row indices of the students that their new grades were generated
    """
        q_cols = ['q1', 'q2', 'q3', 'q4', 'q5']
        df = self.data
        save_index = []
        for ind in df.index:
            if pd.isna(df[q_cols].iloc[ind]).any() == True:
                save_index.append(ind)
                q_mean = df[q_cols].iloc[ind].mean()
                row = df[q_cols].iloc[ind]
                row = row.replace(np.nan, q_mean)
                df.loc[ind,q_cols] = row
        arr = np.array(save_index)
        return df, arr


p = 'data.json'
t = QuestionnaireAnalysis(p)
#print(type(t.data_fname)) #pathlib.windowspath
#print(t.data_fname) #data.json
#print(type(t)) #class
t.read_data()
#print(len(t.data))
#data = t.data
#print(t.data) #100 rows, 12 columns
#print(type(t.data)) #pandas data frame
#print(t.data.columns)
#age = t.show_age_distrib()
#print(age)
#print(type(age))
#r = t.remove_rows_without_mail()
#print(len(r))
#print(len(t.data))
#print(t.data)
#n = t.fill_na_with_mean()
#print(n)
#print(type(n))